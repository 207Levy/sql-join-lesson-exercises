{"numFailedTestSuites":12,"numFailedTests":12,"numPassedTestSuites":1,"numPassedTests":1,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":13,"numTotalTests":13,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1558256396706,"success":false,"testResults":[{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheck3 › Should query for the deities who are both from Greek mythology AND with a coolness level greater than 8\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-3/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400072,"start":1558256398620},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-3\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck3"],"duration":219,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-3\\ex-1.test.js:14:25)"],"fullName":"spotcheck3 Should query for the deities who are both from Greek mythology AND with a coolness level greater than 8","location":null,"numPassingAsserts":0,"status":"failed","title":"Should query for the deities who are both from Greek mythology AND with a coolness level greater than 8"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheck5 › Should query for deities name, coolness, and creation date. Order the results first by creation date, then by decreasing coolness.\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-5/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400092,"start":1558256398652},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-5\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck5"],"duration":219,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-5\\ex-1.test.js:14:25)"],"fullName":"spotcheck5 Should query for deities name, coolness, and creation date. Order the results first by creation date, then by decreasing coolness.","location":null,"numPassingAsserts":0,"status":"failed","title":"Should query for deities name, coolness, and creation date. Order the results first by creation date, then by decreasing coolness."}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheck6 › Should update every deity whose coolness level is above 10 to have a coolness level of 10\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-6/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400096,"start":1558256398619},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-6\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck6"],"duration":229,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-6\\ex-1.test.js:14:25)"],"fullName":"spotcheck6 Should update every deity whose coolness level is above 10 to have a coolness level of 10","location":null,"numPassingAsserts":0,"status":"failed","title":"Should update every deity whose coolness level is above 10 to have a coolness level of 10"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheck7 › Should remove any deity whose main power starts with the letter \"w\"\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-7/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400095,"start":1558256398629},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-7\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck7"],"duration":229,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-7\\ex-1.test.js:14:25)"],"fullName":"spotcheck7 Should remove any deity whose main power starts with the letter \"w\"","location":null,"numPassingAsserts":0,"status":"failed","title":"Should remove any deity whose main power starts with the letter \"w\""}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheckX or exerciseX › DESCRIBE REQS\u001b[39m\u001b[22m\n\n    ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETUP TABLE AND ANY INSERTS' at line 1\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-2/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:21)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400149,"start":1558256398690},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-2\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheckX or exerciseX"],"duration":231,"failureMessages":["Error: ER_PARSE_ERROR: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SETUP TABLE AND ANY INSERTS' at line 1\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-2\\ex-1.test.js:14:21)"],"fullName":"spotcheckX or exerciseX DESCRIBE REQS","location":null,"numPassingAsserts":0,"status":"failed","title":"DESCRIBE REQS"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mspotcheck4 › Should query for deities that have \"eh\" somewhere in their name\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/spot-check-4/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400126,"start":1558256398668},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-4\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck4"],"duration":212,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'deity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-4\\ex-1.test.js:14:25)"],"fullName":"spotcheck4 Should query for deities that have \"eh\" somewhere in their name","location":null,"numPassingAsserts":0,"status":"failed","title":"Should query for deities that have \"eh\" somewhere in their name"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise3 › Your query should determine how many people are suffering only from the 'cabbage' disease and no other\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-3.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400293,"start":1558256400136},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-3.test.js","testResults":[{"ancestorTitles":["exercise3"],"duration":28,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-3.test.js:14:25)"],"fullName":"exercise3 Your query should determine how many people are suffering only from the 'cabbage' disease and no other","location":null,"numPassingAsserts":0,"status":"failed","title":"Your query should determine how many people are suffering only from the 'cabbage' disease and no other"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise6 › You should write a query that determines how many patients have the lettuce disease, per ethnicity\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-6.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400361,"start":1558256400191},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-6.test.js","testResults":[{"ancestorTitles":["exercise6"],"duration":29,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-6.test.js:14:25)"],"fullName":"exercise6 You should write a query that determines how many patients have the lettuce disease, per ethnicity","location":null,"numPassingAsserts":0,"status":"failed","title":"You should write a query that determines how many patients have the lettuce disease, per ethnicity"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise2 › Should write a query that determines how many patients are sick\u001b[39m\u001b[22m\n\n    ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-2.test.js\u001b[39m\u001b[0m\u001b[2m:13:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400438,"start":1558256400252},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-2.test.js","testResults":[{"ancestorTitles":["exercise2"],"duration":25,"failureMessages":["Error: ER_TABLE_EXISTS_ERROR: Table 'ethnicity' already exists\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-2.test.js:13:25)"],"fullName":"exercise2 Should write a query that determines how many patients are sick","location":null,"numPassingAsserts":0,"status":"failed","title":"Should write a query that determines how many patients are sick"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise5 › You should write a query that determines how many patients have the cabbage disease, per symptoms_family field\u001b[39m\u001b[22m\n\n    ER_NO_SUCH_TABLE: Table 'sql_intro.patient' doesn't exist\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-5.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400455,"start":1558256398641},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-5.test.js","testResults":[{"ancestorTitles":["exercise5"],"duration":563,"failureMessages":["Error: ER_NO_SUCH_TABLE: Table 'sql_intro.patient' doesn't exist\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-5.test.js:14:25)"],"fullName":"exercise5 You should write a query that determines how many patients have the cabbage disease, per symptoms_family field","location":null,"numPassingAsserts":0,"status":"failed","title":"You should write a query that determines how many patients have the cabbage disease, per symptoms_family field"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise4 › Your should query for the survival rate of all the sick patients and order them in ascending order of ID. Your query should only return 2 columns\u001b[39m\u001b[22m\n\n    ER_CANT_CREATE_TABLE: Can't create table `sql_intro`.`patient` (errno: 150 \"Foreign key constraint is incorrectly formed\")\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 | \u001b[39m    async tableSetup(commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 | \u001b[39m        \u001b[36mfor\u001b[39m (let command of commands) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 35 | \u001b[39m            await \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mconnection\u001b[33m.\u001b[39mquery(command)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                  \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 36 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 | \u001b[39m    }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 38 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Sequence._packetToError (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Sequence.js\u001b[39m\u001b[0m\u001b[2m:47:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Query.Object.<anonymous>.Query.ErrorPacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/sequences/Query.js\u001b[39m\u001b[0m\u001b[2m:77:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:291:23)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser._parsePacket (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:433:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Parser.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Parser.js\u001b[39m\u001b[0m\u001b[2m:43:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol.write (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:38:16)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:91:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Socket.<anonymous> (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:525:10)\u001b[2m\u001b[22m\n\u001b[2m          --------------------\u001b[22m\n\u001b[2m      \u001b[2mat Protocol.Object.<anonymous>.Protocol._enqueue (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/protocol/Protocol.js\u001b[39m\u001b[0m\u001b[2m:144:48)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/mysql/lib/Connection.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:16:24\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._execute (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/debuggability.js\u001b[39m\u001b[0m\u001b[2m:313:9)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Promise._resolveFromExecutor (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:483:18)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat new Promise (\u001b[2m\u001b[0m\u001b[36mnode_modules/bluebird/js/release/promise.js\u001b[39m\u001b[0m\u001b[2m:79:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Connection.promiseCallback (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/helper.js\u001b[39m\u001b[0m\u001b[2m:6:10)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat connection.Object.<anonymous>.connection.query (\u001b[2m\u001b[0m\u001b[36mnode_modules/promise-mysql/lib/connection.js\u001b[39m\u001b[0m\u001b[2m:64:28)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat SqlTestUtils.query [as tableSetup] (\u001b[2m\u001b[0m\u001b[36mtests/sql_test_utils.js\u001b[39m\u001b[0m\u001b[2m:35:35)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.tableSetup (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-4.test.js\u001b[39m\u001b[0m\u001b[2m:14:25)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400589,"start":1558256400206},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-4.test.js","testResults":[{"ancestorTitles":["exercise4"],"duration":223,"failureMessages":["Error: ER_CANT_CREATE_TABLE: Can't create table `sql_intro`.`patient` (errno: 150 \"Foreign key constraint is incorrectly formed\")\n    at Query.Object.<anonymous>.Sequence._packetToError (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Sequence.js:47:14)\n    at Query.Object.<anonymous>.Query.ErrorPacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\sequences\\Query.js:77:18)\n    at Protocol.Object.<anonymous>.Protocol._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:291:23)\n    at Parser._parsePacket (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:433:10)\n    at Parser.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Parser.js:43:10)\n    at Protocol.Object.<anonymous>.Protocol.write (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:38:16)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:91:28)\n    at Socket.<anonymous> (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:525:10)\n    at Socket.emit (events.js:182:13)\n    at addChunk (_stream_readable.js:283:12)\n    at readableAddChunk (_stream_readable.js:264:11)\n    at Socket.Readable.push (_stream_readable.js:219:10)\n    at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)\n    --------------------\n    at Protocol.Object.<anonymous>.Protocol._enqueue (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\protocol\\Protocol.js:144:48)\n    at Connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\mysql\\lib\\Connection.js:201:25)\n    at C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:16:24\n    at Promise._execute (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\debuggability.js:313:9)\n    at Promise._resolveFromExecutor (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:483:18)\n    at new Promise (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\bluebird\\js\\release\\promise.js:79:10)\n    at Connection.promiseCallback (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\helper.js:6:10)\n    at connection.Object.<anonymous>.connection.query (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\node_modules\\promise-mysql\\lib\\connection.js:64:28)\n    at SqlTestUtils.query [as tableSetup] (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\sql_test_utils.js:35:35)\n    at Object.tableSetup (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-4.test.js:14:25)"],"fullName":"exercise4 Your should query for the survival rate of all the sick patients and order them in ascending order of ID. Your query should only return 2 columns","location":null,"numPassingAsserts":0,"status":"failed","title":"Your should query for the survival rate of all the sick patients and order them in ascending order of ID. Your query should only return 2 columns"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mexercise1 › Create the Patient, Ethnicity, Symptoms, Gender, and Disease tables as per the instructions (please note the spelling of each field & table name)\u001b[39m\u001b[22m\n\n    Error running your query, please check the syntax__stacktrace__\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 20 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 | \u001b[39m        \u001b[36mfor\u001b[39m (let result of allTableResults) {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 22 | \u001b[39m            expect(result\u001b[33m.\u001b[39mresult\u001b[33m,\u001b[39m result\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoBeNull()\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                      \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 23 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m        let validation \u001b[33m=\u001b[39m await testUtils\u001b[33m.\u001b[39mexecuteQuery(\u001b[32m`\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeNull (\u001b[2m\u001b[0m\u001b[36mtests/exercises/ex-1.test.js\u001b[39m\u001b[0m\u001b[2m:22:55)\u001b[2m\u001b[22m\n","numFailingTests":1,"numPassingTests":0,"numPendingTests":0,"perfStats":{"end":1558256400596,"start":1558256400175},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-1.test.js","testResults":[{"ancestorTitles":["exercise1"],"duration":293,"failureMessages":["Error: Error running your query, please check the syntax__stacktrace__\n    at Object.toBeNull (C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\exercises\\ex-1.test.js:22:55)"],"fullName":"exercise1 Create the Patient, Ethnicity, Symptoms, Gender, and Disease tables as per the instructions (please note the spelling of each field & table name)","location":null,"numPassingAsserts":0,"status":"failed","title":"Create the Patient, Ethnicity, Symptoms, Gender, and Disease tables as per the instructions (please note the spelling of each field & table name)"}],"sourceMaps":{},"skipped":false,"leaks":false},{"console":null,"failureMessage":null,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"perfStats":{"end":1558256400707,"start":1558256400296},"snapshot":{"added":0,"fileDeleted":false,"matched":0,"unchecked":0,"unmatched":0,"updated":0,"uncheckedKeys":[]},"testFilePath":"C:\\xampp\\htdocs\\sql-join-lesson-exercises\\tests\\spot-check-1\\ex-1.test.js","testResults":[{"ancestorTitles":["spotcheck1"],"duration":272,"failureMessages":[],"fullName":"spotcheck1 Should write a query that returns only the `item_purchased`, `amount` of a transaction, and `name`, `industry` of the company for that transaction","location":null,"numPassingAsserts":0,"status":"passed","title":"Should write a query that returns only the `item_purchased`, `amount` of a transaction, and `name`, `industry` of the company for that transaction"}],"sourceMaps":{},"skipped":false,"leaks":false}],"wasInterrupted":false}